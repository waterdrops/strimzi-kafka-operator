
parameters:
  name: ''
  display_name: ''
  test_case: ''
  groups: ''
  excludedGroups: ''
  cluster_operator_install_type: ''
  timeout: ''
  strimzi_rbac_scope: 'CLUSTER'
  # currently minikube with 2 CPUs and ~8GB RAM can handle 2 parallel tests at once (not more)
  parallel: '2' 

jobs:
- job: '${{ parameters.name }}_system_tests'
  displayName: '${{ parameters.display_name }}'
  # Strategy for the job
  strategy:
    matrix:
      ${{ parameters.name }}:
        image: 'Ubuntu-18.04'
        jdk_version: '11'
        jdk_path: '/usr/lib/jvm/java-11-openjdk-amd64'
  # Base system
  pool:
    vmImage: 'Ubuntu-18.04'
  # Environment variables
  variables:
    - template: 'default_variables.yaml'
  # Set timeout for jobs
  timeoutInMinutes: ${{ parameters.timeout }}
  # Pipeline steps
  steps:
    - script: echo "##vso[task.setvariable variable=docker_tag]$([[ $(cat release.version) == *SNAPSHOT* ]] && echo "latest" || tr '[:upper:]' '[:lower:]' < release.version  )"
      displayName: "Set release tag as DOCKER_TAG for tests"

    - template: "general_steps.yaml"

    - bash: |
        eval $(minikube docker-env)
        make docker_build
        make docker_tag
        make docker_push
      env:
        MVN_ARGS: '-B -DskipTests'
      displayName: "Build Strimzi images"
      condition: eq(variables['docker_tag'], 'latest')

    - bash: mkdir -p docker-images/kafka/tmp/archives
      displayName: "Create dir for Kafka binaries cache"
      condition: ne(variables['docker_tag'], 'latest')

      # We need to set DOCKER_REGISTRY to IP and port of service, which is created by minikube registry addon, port is always 80
      # Default value for PRs is localhost:5000 because we need to push built images into minikube registry and make them available for pods
    - script: |
        echo "##vso[task.setvariable variable=docker_registry]$(kubectl get service registry -n kube-system -o=jsonpath='{.spec.clusterIP}'):80"
      displayName: "Set docker_registry to local registry in minikube"
      condition: eq(variables['docker_registry'], 'localhost:5000')

    - bash: ".azure/scripts/setup_upgrade.sh"
      displayName: "Setup environment for upgrade"
      condition: eq('${{ parameters.groups }}', 'upgrade')

    - task: Maven@3
      inputs:
        mavenPomFile: 'systemtest/pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: 'default'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/failsafe-reports/TEST-*.xml'
        goals: 'verify'
        options: '-Dgroups=${{ parameters.groups }} -Dit.test="${{ parameters.test_case }}" -DexcludedGroups=flaky,loadbalancer,networkpolicies,${{ parameters.excludedGroups }} -Dmaven.javadoc.skip=true -B -V -Dfailsafe.rerunFailingTestsCount=2 -Djunit.jupiter.execution.parallel.enabled=true -Djunit.jupiter.execution.parallel.config.fixed.parallelism="${{ parameters.parallel }}"'
      env:
        DOCKER_TAG: $(docker_tag)
        BRIDGE_IMAGE: "latest-released"
        STRIMZI_RBAC_SCOPE: '${{ parameters.strimzi_rbac_scope }}'
        DOCKER_REGISTRY: registry.minikube
      displayName: 'Run systemtests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: "systemtest"
        testRunTitle: "System tests"
      condition: always()

    - bash: |
        rm -rf systemtest/target/logs/timeMeasuring
      displayName: 'Remove timeMeasuring dir from logs'
      condition: always()

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'systemtest/target/logs/'
        artifactName: systemtest-logs
      displayName: 'Publish logs from failed tests'
      condition: always()
